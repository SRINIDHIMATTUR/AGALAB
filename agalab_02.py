# -*- coding: utf-8 -*-
"""AGA 02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17q5QzrDdGnYAScGj0-LWqFR5_gUF-BCJ
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import io
from tensorflow.keras.datasets import mnist

(x_train, _), (x_test, _) = mnist.load_data()
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

def add_noise(img, noise_factor=0.5):
    noisy_img = img + noise_factor * np.random.randn(*img.shape)
    noisy_img = np.clip(noisy_img, 0., 1.)
    return noisy_img

x_train_noisy = np.array([add_noise(img) for img in x_train])
x_test_noisy = np.array([add_noise(img) for img in x_test])

def denoising_autoencoder(input_shape):
    input_img = tf.keras.layers.Input(shape=input_shape)
    x = tf.keras.layers.Flatten()(input_img)
    x = tf.keras.layers.Dense(128, activation="relu")(x)
    x = tf.keras.layers.Dense(64, activation="relu")(x)
    encoded = tf.keras.layers.Dense(32, activation="relu")(x)

    x = tf.keras.layers.Dense(64, activation="relu")(encoded)
    x = tf.keras.layers.Dense(128, activation="relu")(x)
    decoded = tf.keras.layers.Dense(np.prod(input_shape), activation="sigmoid")(x)
    decoded = tf.keras.layers.Reshape(input_shape)(decoded)

    autoencoder = tf.keras.models.Model(input_img, decoded)
    autoencoder.compile(optimizer='adam', loss='binary_crossentropy')
    return autoencoder

autoencoder = denoising_autoencoder((28, 28, 1))
autoencoder.fit(x_train_noisy, x_train, epochs=10, batch_size=256, validation_data=(x_test_noisy, x_test))

def reconstruct_image(uploaded_image):
    img = Image.open(io.BytesIO(uploaded_image))
    img = img.convert('L').resize((28, 28))
    img = np.array(img) / 255.0
    img = np.expand_dims(img, axis=-1)
    noisy_img = add_noise(img)
    noisy_img = np.expand_dims(noisy_img, axis=0)

    reconstructed_img = autoencoder.predict(noisy_img)
    mse = np.mean(np.square(noisy_img - reconstructed_img))

    return noisy_img[0], reconstructed_img[0], mse

def display_images(noisy_img, reconstructed_img, mse):
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.imshow(noisy_img.reshape(28, 28), cmap="gray")
    plt.title("Noisy Image")
    plt.axis("off")

    plt.subplot(1, 2, 2)
    plt.imshow(reconstructed_img.reshape(28, 28), cmap="gray")
    plt.title(f"Reconstructed Image\n Reconstructed Loss: {mse:.4f}")
    plt.axis("off")

    plt.show()

uploaded_image = open('image2.jpg', 'rb').read()
noisy_img, reconstructed_img, mse = reconstruct_image(uploaded_image)
display_images(noisy_img, reconstructed_img, mse)

